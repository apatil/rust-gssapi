/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

#[link(name = "Kerberos", kind = "framework")]
#[cfg(target_os = "macos")]
extern { }

mod defines;
pub use defines::*;

pub enum gss_name_struct { }
pub type gss_name_t = *mut gss_name_struct;
pub enum gss_cred_id_struct { }
pub type gss_cred_id_t = *mut gss_cred_id_struct;
pub enum gss_ctx_id_struct { }
pub type gss_ctx_id_t = *mut gss_ctx_id_struct;
pub type gss_uint32 = u32;
pub type gss_int32 = i32;
pub type OM_uint32 = gss_uint32;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gss_OID_desc_struct {
    pub length: OM_uint32,
    pub elements: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for gss_OID_desc_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_OID_desc = gss_OID_desc_struct;
pub type gss_OID = *mut gss_OID_desc_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gss_OID_set_desc_struct {
    pub count: usize,
    pub elements: gss_OID,
}
impl ::std::default::Default for gss_OID_set_desc_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_OID_set_desc = gss_OID_set_desc_struct;
pub type gss_OID_set = *mut gss_OID_set_desc_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gss_buffer_desc_struct {
    pub length: usize,
    pub value: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for gss_buffer_desc_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_buffer_desc = gss_buffer_desc_struct;
pub type gss_buffer_t = *mut gss_buffer_desc_struct;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct gss_channel_bindings_struct {
    pub initiator_addrtype: OM_uint32,
    pub initiator_address: gss_buffer_desc,
    pub acceptor_addrtype: OM_uint32,
    pub acceptor_address: gss_buffer_desc,
    pub application_data: gss_buffer_desc,
}
impl ::std::default::Default for gss_channel_bindings_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_channel_bindings_t = *mut gss_channel_bindings_struct;
pub type gss_qop_t = OM_uint32;
pub type gss_cred_usage_t = ::std::os::raw::c_int;
pub type gss_const_buffer_t = *const gss_buffer_desc;
pub type gss_const_channel_bindings_t = *const gss_channel_bindings_struct;
pub type gss_const_ctx_id_t = *const gss_ctx_id_struct;
pub type gss_const_cred_id_t = *const gss_cred_id_struct;
pub type gss_const_name_t = *const gss_name_struct;
pub type gss_const_OID = *const gss_OID_desc;
pub type gss_const_OID_set = *const gss_OID_set_desc;
extern "C" {
    pub static mut GSS_C_NT_USER_NAME: gss_OID;
    pub static mut GSS_C_NT_MACHINE_UID_NAME: gss_OID;
    pub static mut GSS_C_NT_STRING_UID_NAME: gss_OID;
    pub static mut GSS_C_NT_HOSTBASED_SERVICE_X: gss_OID;
    pub static mut GSS_C_NT_HOSTBASED_SERVICE: gss_OID;
    pub static mut GSS_C_NT_ANONYMOUS: gss_OID;
    pub static mut GSS_C_NT_EXPORT_NAME: gss_OID;
    pub static mut GSS_C_MA_MECH_CONCRETE: gss_const_OID;
    pub static mut GSS_C_MA_MECH_PSEUDO: gss_const_OID;
    pub static mut GSS_C_MA_MECH_COMPOSITE: gss_const_OID;
    pub static mut GSS_C_MA_MECH_NEGO: gss_const_OID;
    pub static mut GSS_C_MA_MECH_GLUE: gss_const_OID;
    pub static mut GSS_C_MA_NOT_MECH: gss_const_OID;
    pub static mut GSS_C_MA_DEPRECATED: gss_const_OID;
    pub static mut GSS_C_MA_NOT_DFLT_MECH: gss_const_OID;
    pub static mut GSS_C_MA_ITOK_FRAMED: gss_const_OID;
    pub static mut GSS_C_MA_AUTH_INIT: gss_const_OID;
    pub static mut GSS_C_MA_AUTH_TARG: gss_const_OID;
    pub static mut GSS_C_MA_AUTH_INIT_INIT: gss_const_OID;
    pub static mut GSS_C_MA_AUTH_TARG_INIT: gss_const_OID;
    pub static mut GSS_C_MA_AUTH_INIT_ANON: gss_const_OID;
    pub static mut GSS_C_MA_AUTH_TARG_ANON: gss_const_OID;
    pub static mut GSS_C_MA_DELEG_CRED: gss_const_OID;
    pub static mut GSS_C_MA_INTEG_PROT: gss_const_OID;
    pub static mut GSS_C_MA_CONF_PROT: gss_const_OID;
    pub static mut GSS_C_MA_MIC: gss_const_OID;
    pub static mut GSS_C_MA_WRAP: gss_const_OID;
    pub static mut GSS_C_MA_PROT_READY: gss_const_OID;
    pub static mut GSS_C_MA_REPLAY_DET: gss_const_OID;
    pub static mut GSS_C_MA_OOS_DET: gss_const_OID;
    pub static mut GSS_C_MA_CBINDINGS: gss_const_OID;
    pub static mut GSS_C_MA_PFS: gss_const_OID;
    pub static mut GSS_C_MA_COMPRESS: gss_const_OID;
    pub static mut GSS_C_MA_CTX_TRANS: gss_const_OID;
}
extern "C" {
    pub fn gss_acquire_cred(arg1: *mut OM_uint32, arg2: gss_name_t,
                            arg3: OM_uint32, arg4: gss_OID_set,
                            arg5: gss_cred_usage_t, arg6: *mut gss_cred_id_t,
                            arg7: *mut gss_OID_set, arg8: *mut OM_uint32)
     -> OM_uint32;
    pub fn gss_release_cred(arg1: *mut OM_uint32, arg2: *mut gss_cred_id_t)
     -> OM_uint32;
    pub fn gss_init_sec_context(arg1: *mut OM_uint32, arg2: gss_cred_id_t,
                                arg3: *mut gss_ctx_id_t, arg4: gss_name_t,
                                arg5: gss_OID, arg6: OM_uint32,
                                arg7: OM_uint32, arg8: gss_channel_bindings_t,
                                arg9: gss_buffer_t, arg10: *mut gss_OID,
                                arg11: gss_buffer_t, arg12: *mut OM_uint32,
                                arg13: *mut OM_uint32) -> OM_uint32;
    pub fn gss_accept_sec_context(arg1: *mut OM_uint32,
                                  arg2: *mut gss_ctx_id_t,
                                  arg3: gss_cred_id_t, arg4: gss_buffer_t,
                                  arg5: gss_channel_bindings_t,
                                  arg6: *mut gss_name_t, arg7: *mut gss_OID,
                                  arg8: gss_buffer_t, arg9: *mut OM_uint32,
                                  arg10: *mut OM_uint32,
                                  arg11: *mut gss_cred_id_t) -> OM_uint32;
    pub fn gss_process_context_token(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                                     arg3: gss_buffer_t) -> OM_uint32;
    pub fn gss_delete_sec_context(arg1: *mut OM_uint32,
                                  arg2: *mut gss_ctx_id_t, arg3: gss_buffer_t)
     -> OM_uint32;
    pub fn gss_context_time(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                            arg3: *mut OM_uint32) -> OM_uint32;
    pub fn gss_get_mic(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                       arg3: gss_qop_t, arg4: gss_buffer_t,
                       arg5: gss_buffer_t) -> OM_uint32;
    pub fn gss_verify_mic(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                          arg3: gss_buffer_t, arg4: gss_buffer_t,
                          arg5: *mut gss_qop_t) -> OM_uint32;
    pub fn gss_wrap(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                    arg3: ::std::os::raw::c_int, arg4: gss_qop_t,
                    arg5: gss_buffer_t, arg6: *mut ::std::os::raw::c_int,
                    arg7: gss_buffer_t) -> OM_uint32;
    pub fn gss_unwrap(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                      arg3: gss_buffer_t, arg4: gss_buffer_t,
                      arg5: *mut ::std::os::raw::c_int, arg6: *mut gss_qop_t)
     -> OM_uint32;
    pub fn gss_display_status(arg1: *mut OM_uint32, arg2: OM_uint32,
                              arg3: ::std::os::raw::c_int, arg4: gss_OID,
                              arg5: *mut OM_uint32, arg6: gss_buffer_t)
     -> OM_uint32;
    pub fn gss_indicate_mechs(arg1: *mut OM_uint32, arg2: *mut gss_OID_set)
     -> OM_uint32;
    pub fn gss_compare_name(arg1: *mut OM_uint32, arg2: gss_name_t,
                            arg3: gss_name_t,
                            arg4: *mut ::std::os::raw::c_int) -> OM_uint32;
    pub fn gss_display_name(arg1: *mut OM_uint32, arg2: gss_name_t,
                            arg3: gss_buffer_t, arg4: *mut gss_OID)
     -> OM_uint32;
    pub fn gss_import_name(arg1: *mut OM_uint32, arg2: gss_buffer_t,
                           arg3: gss_OID, arg4: *mut gss_name_t) -> OM_uint32;
    pub fn gss_release_name(arg1: *mut OM_uint32, arg2: *mut gss_name_t)
     -> OM_uint32;
    pub fn gss_release_buffer(arg1: *mut OM_uint32, arg2: gss_buffer_t)
     -> OM_uint32;
    pub fn gss_release_oid_set(arg1: *mut OM_uint32, arg2: *mut gss_OID_set)
     -> OM_uint32;
    pub fn gss_inquire_cred(arg1: *mut OM_uint32, arg2: gss_cred_id_t,
                            arg3: *mut gss_name_t, arg4: *mut OM_uint32,
                            arg5: *mut gss_cred_usage_t,
                            arg6: *mut gss_OID_set) -> OM_uint32;
    pub fn gss_inquire_context(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                               arg3: *mut gss_name_t, arg4: *mut gss_name_t,
                               arg5: *mut OM_uint32, arg6: *mut gss_OID,
                               arg7: *mut OM_uint32,
                               arg8: *mut ::std::os::raw::c_int,
                               arg9: *mut ::std::os::raw::c_int) -> OM_uint32;
    pub fn gss_wrap_size_limit(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                               arg3: ::std::os::raw::c_int, arg4: gss_qop_t,
                               arg5: OM_uint32, arg6: *mut OM_uint32)
     -> OM_uint32;
    pub fn gss_import_name_object(arg1: *mut OM_uint32,
                                  arg2: *mut ::std::os::raw::c_void,
                                  arg3: gss_OID, arg4: *mut gss_name_t)
     -> OM_uint32;
    pub fn gss_export_name_object(arg1: *mut OM_uint32, arg2: gss_name_t,
                                  arg3: gss_OID,
                                  arg4: *mut *mut ::std::os::raw::c_void)
     -> OM_uint32;
    pub fn gss_add_cred(arg1: *mut OM_uint32, arg2: gss_cred_id_t,
                        arg3: gss_name_t, arg4: gss_OID,
                        arg5: gss_cred_usage_t, arg6: OM_uint32,
                        arg7: OM_uint32, arg8: *mut gss_cred_id_t,
                        arg9: *mut gss_OID_set, arg10: *mut OM_uint32,
                        arg11: *mut OM_uint32) -> OM_uint32;
    pub fn gss_inquire_cred_by_mech(arg1: *mut OM_uint32, arg2: gss_cred_id_t,
                                    arg3: gss_OID, arg4: *mut gss_name_t,
                                    arg5: *mut OM_uint32,
                                    arg6: *mut OM_uint32,
                                    arg7: *mut gss_cred_usage_t) -> OM_uint32;
    pub fn gss_export_sec_context(arg1: *mut OM_uint32,
                                  arg2: *mut gss_ctx_id_t, arg3: gss_buffer_t)
     -> OM_uint32;
    pub fn gss_import_sec_context(arg1: *mut OM_uint32, arg2: gss_buffer_t,
                                  arg3: *mut gss_ctx_id_t) -> OM_uint32;
    pub fn gss_release_oid(arg1: *mut OM_uint32, arg2: *mut gss_OID)
     -> OM_uint32;
    pub fn gss_create_empty_oid_set(arg1: *mut OM_uint32,
                                    arg2: *mut gss_OID_set) -> OM_uint32;
    pub fn gss_add_oid_set_member(arg1: *mut OM_uint32, arg2: gss_OID,
                                  arg3: *mut gss_OID_set) -> OM_uint32;
    pub fn gss_test_oid_set_member(arg1: *mut OM_uint32, arg2: gss_OID,
                                   arg3: gss_OID_set,
                                   arg4: *mut ::std::os::raw::c_int)
     -> OM_uint32;
    pub fn gss_str_to_oid(arg1: *mut OM_uint32, arg2: gss_buffer_t,
                          arg3: *mut gss_OID) -> OM_uint32;
    pub fn gss_oid_to_str(arg1: *mut OM_uint32, arg2: gss_OID,
                          arg3: gss_buffer_t) -> OM_uint32;
    pub fn gss_inquire_names_for_mech(arg1: *mut OM_uint32, arg2: gss_OID,
                                      arg3: *mut gss_OID_set) -> OM_uint32;
    pub fn gss_inquire_mechs_for_name(arg1: *mut OM_uint32, arg2: gss_name_t,
                                      arg3: *mut gss_OID_set) -> OM_uint32;
    pub fn gss_sign(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                    arg3: ::std::os::raw::c_int, arg4: gss_buffer_t,
                    arg5: gss_buffer_t) -> OM_uint32;
    pub fn gss_verify(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                      arg3: gss_buffer_t, arg4: gss_buffer_t,
                      arg5: *mut ::std::os::raw::c_int) -> OM_uint32;
    pub fn gss_seal(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                    arg3: ::std::os::raw::c_int, arg4: ::std::os::raw::c_int,
                    arg5: gss_buffer_t, arg6: *mut ::std::os::raw::c_int,
                    arg7: gss_buffer_t) -> OM_uint32;
    pub fn gss_unseal(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                      arg3: gss_buffer_t, arg4: gss_buffer_t,
                      arg5: *mut ::std::os::raw::c_int,
                      arg6: *mut ::std::os::raw::c_int) -> OM_uint32;
    pub fn gss_export_name(arg1: *mut OM_uint32, arg2: gss_name_t,
                           arg3: gss_buffer_t) -> OM_uint32;
    pub fn gss_duplicate_name(arg1: *mut OM_uint32, arg2: gss_name_t,
                              arg3: *mut gss_name_t) -> OM_uint32;
    pub fn gss_canonicalize_name(arg1: *mut OM_uint32, arg2: gss_name_t,
                                 arg3: gss_OID, arg4: *mut gss_name_t)
     -> OM_uint32;
    pub fn gss_pseudo_random(arg1: *mut OM_uint32, arg2: gss_ctx_id_t,
                             arg3: ::std::os::raw::c_int, arg4: gss_buffer_t,
                             arg5: susize, arg6: gss_buffer_t) -> OM_uint32;
    pub fn gss_store_cred(arg1: *mut OM_uint32, arg2: gss_cred_id_t,
                          arg3: gss_cred_usage_t, arg4: gss_OID,
                          arg5: OM_uint32, arg6: OM_uint32,
                          arg7: *mut gss_OID_set, arg8: *mut gss_cred_usage_t)
     -> OM_uint32;
    pub fn gss_set_neg_mechs(arg1: *mut OM_uint32, arg2: gss_cred_id_t,
                             arg3: gss_OID_set) -> OM_uint32;
    pub fn gss_indicate_mechs_by_attrs(arg1: *mut OM_uint32,
                                       arg2: gss_const_OID_set,
                                       arg3: gss_const_OID_set,
                                       arg4: gss_const_OID_set,
                                       arg5: *mut gss_OID_set) -> OM_uint32;
    pub fn gss_inquire_attrs_for_mech(arg1: *mut OM_uint32,
                                      arg2: gss_const_OID,
                                      arg3: *mut gss_OID_set,
                                      arg4: *mut gss_OID_set) -> OM_uint32;
    pub fn gss_display_mech_attr(arg1: *mut OM_uint32, arg2: gss_const_OID,
                                 arg3: gss_buffer_t, arg4: gss_buffer_t,
                                 arg5: gss_buffer_t) -> OM_uint32;
    pub fn gss_inquire_saslname_for_mech(arg1: *mut OM_uint32, arg2: gss_OID,
                                         arg3: gss_buffer_t,
                                         arg4: gss_buffer_t,
                                         arg5: gss_buffer_t) -> OM_uint32;
    pub fn gss_inquire_mech_for_saslname(arg1: *mut OM_uint32,
                                         arg2: gss_buffer_t,
                                         arg3: *mut gss_OID) -> OM_uint32;
}
